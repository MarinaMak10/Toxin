@font-face  {
    font-family:  'Montserrat';
    src:  url("fonts/Montserrat-Regular.woff2")  format('woff2');
    font-weight:  300;
    font-style:  normal;
    font-display:  swap;
}

@font-face  {
    font-family:  'Montserrat';
    src:  url("fonts/Montserrat-Bold.woff2")  format('woff2');
    font-weight:  700;
    font-style:  normal;
    font-display:  swap;
}

/**
  Нормализация блочной модели
 */
 *,
 ::before,
 ::after {
   box-sizing: border-box;
 }
 
 /**
   Убираем внутренние отступы слева тегам списков,
   у которых есть атрибут class
  */
 :where(ul, ol):where([class]) {
   padding-left: 0;
 }
 
 /**
   Убираем внешние отступы body и двум другим тегам,
   у которых есть атрибут class
  */
 body,
 :where(blockquote, figure):where([class]) {
   margin: 0;
 }
 
 /**
   Убираем внешние отступы вертикали нужным тегам,
   у которых есть атрибут class
  */
 :where(
   h1,
   h2,
   h3,
   h4,
   h5,
   h6,
   p,
   ul,
   ol,
   dl
 ):where([class]) {
   margin-block: 0;
 }
 
 :where(dd[class]) {
   margin-left: 0;
 }
 
 :where(fieldset[class]) {
   margin-left: 0;
   padding: 0;
   border: none;
 }
 
 /**
   Убираем стандартный маркер маркированному списку,
   у которого есть атрибут class
  */
 :where(ul[class]) {
   list-style: none;
 }
 
 :where(address[class]) {
   font-style: normal;
 }
 
 /**
   Обнуляем вертикальные внешние отступы параграфа,
   объявляем локальную переменную для внешнего отступа вниз,
   чтобы избежать взаимодействие с более сложным селектором
  */
 p {
   --paragraphMarginBottom: 24px;
 
   margin-block: 0;
 }
 
 /**
   Внешний отступ вниз для параграфа без атрибута class,
   который расположен не последним среди своих соседних элементов
  */
 p:where(:not([class]):not(:last-child)) {
   margin-bottom: var(--paragraphMarginBottom);
 }
 
 
 /**
   Упрощаем работу с изображениями
  */
 img {
   display: block;
   max-width: 100%;
 }
 
 /**
   Наследуем свойства шрифт для полей ввода
  */
 input,
 textarea,
 select,
 button {
   font: inherit;
 }
 
 html {
   /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
   height: 100%;
 }
 
 /**
   Плавный скролл
  */
 html,
 :has(:target) {
   scroll-behavior: smooth;
 }
 
 body {
   /**
     Пригодится в большинстве ситуаций
     (когда, например, нужно будет "прижать" футер к низу сайта)
    */
   min-height: 100%;
   /**
     Унифицированный интерлиньяж
    */
   line-height: 1.5;
 }
 
 /**
   Приводим к единому цвету svg-элементы
  */
 svg *[fill] { fill: currentColor }
 svg *[stroke] { stroke: currentColor }
 
 /**
   Чиним баг задержки смены цвета при взаимодействии с svg-элементами
  */
 svg * {
   transition-property: fill, stroke;
 }
 
 /**
   Удаляем все анимации и переходы для людей,
   которые предпочитают их не использовать
  */
 @media (prefers-reduced-motion: reduce) {
   *,
   ::before,
   ::after {
     animation-duration: 0.01ms !important;
     animation-iteration-count: 1 !important;
     transition-duration: 0.01ms !important;
     scroll-behavior: auto !important;
   }
 }

 :root  {
    --color-dark-100: rgba(31, 32, 65, 1); 
    --color-dark-75:  rgba(31, 32, 65, .75);
    --color-dark-50:  rgba(31, 32, 65, .5);
    --color-dark-25:  rgba(31, 32, 65, .25);
    --color-dark-5:  rgba(31, 32, 65, .05);
    --color-purple:  #BC9CFF;
    --color-green:  #6FCF97;

    --background: linear-gradient(#BC9CFF, #8BA4F9);
    --border-color: linear-gradient(#BC9CFF, #8BA4F9);

    --border-radius-field:  4px;
    --border-radius-toggle:  10px;
    --border-radius-button:  22px;

    --border-field-default:  1px  solid  var(--color-dark-25);
    --border-field-focus:  1px  solid  var(--color-dark-50);
    --border-toggle:  1px  solid  var(--color-purple);
    --border-button:  2px  solid  var(--background);

    --font-family-base:  'Montserrat',  sans-serif;

    --input-height:  44px;
    --input-toggle-height:  20px;

    --container-width:  1440px;
    --container-padding-x:  15px;

    --transition-duration:  0.2s;

 }

 body  {
    background-color:  white;
    font-family:  var(--font-family-base);
    font-size:  14px;
    line-height:  1.5;
    color:  var(--color-dark-75);
 }

 a,  button,  input,  textarea,  svg *  {
  -o-transition-duration: var(--transition-duration);
}

 a  {
  color: var(--color-dark-50);
  text-decoration: none;
 }
 
 a:hover  {
  color: var(--color-dark-75);
   }

 .container  {
    max-width:  calc(var(--container-width)  +  var(--container-padding-x)  *  2);
    margin-inline:  auto;
    padding-inline:  var(--container-padding-x);
 }

 h1  {
    font-weight: 700;
    font-size: 24px;
 }

 h2  {
    font-weight: 700;
    font-size: 19px;
 }

 h3  {
    font-weight: 700;
    font-size: 12px;
 }

 button  {
  display: inline-block;
  align-items: center;
  height: 34px;
  text-transform: uppercase;
  padding-inline: 26px;
  border: var(--border-button);
 }

.header  {
  display: flex;
  justify-content: space-between;
  align-items: center;
  column-gap: 20px;
}

.header-menu-list  {
  display: flex;
  column-gap: 20px;
  
}

.header-menu-link  {
  display: flex;
  align-items: center;
  
}
/* 
.menu-link-dropdown  {
  column-gap: 0;
}*/

.header-menu-link.item-dropdown::after  {
content: "";
border-bottom: 2px solid var(--color-dark-75);
border-right: 2px solid var(--color-dark-75);
transform: rotate(45deg);
width: 7px;
height: 7px;
align-items: center;

}

.item-dropdown{
  display: flex;
  gap: 7px;
  flex-direction: row;
  position: relative;
} 

.menu-link-dropdown{
  position: absolute;
  min-width: 160px;
  border: var(--border-field-default);
  border-radius: var(--border-radius-field);
  z-index: 1;
}
